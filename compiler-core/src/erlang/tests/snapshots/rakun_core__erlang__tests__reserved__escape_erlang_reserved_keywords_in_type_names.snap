---
source: compiler-core/src/erlang/tests/reserved.rs
expression: "pub record After { TestAfter }\npub record And { TestAnd }\npub record Andalso { TestAndAlso }\npub record Band { TestBAnd }\npub record Begin { TestBegin }\npub record Bnot { TestBNot }\npub record Bor { TestBOr }\npub record Bsl { TestBsl }\npub record Bsr { TestBsr }\npub record Bxor { TestBXor }\npub record Case { TestCase }\npub record Catch { TestCatch }\npub record Cond { TestCond }\npub record Div { TestDiv }\npub record End { TestEnd }\npub record Fun { TestFun }\npub record If { TestIf }\npub record Let { TestLet }\npub record Maybe { TestMaybe }\npub record Not { TestNot }\npub record Of { TestOf }\npub record Or { TestOr }\npub record Orelse { TestOrElse }\npub record Query { TestQuery }\npub record Receive { TestReceive }\npub record Rem { TestRem }\npub record Try { TestTry }\npub record When { TestWhen }\npub record Xor { TestXor }"
---
----- SOURCE CODE
pub record After { TestAfter }
pub record And { TestAnd }
pub record Andalso { TestAndAlso }
pub record Band { TestBAnd }
pub record Begin { TestBegin }
pub record Bnot { TestBNot }
pub record Bor { TestBOr }
pub record Bsl { TestBsl }
pub record Bsr { TestBsr }
pub record Bxor { TestBXor }
pub record Case { TestCase }
pub record Catch { TestCatch }
pub record Cond { TestCond }
pub record Div { TestDiv }
pub record End { TestEnd }
pub record Fun { TestFun }
pub record If { TestIf }
pub record Let { TestLet }
pub record Maybe { TestMaybe }
pub record Not { TestNot }
pub record Of { TestOf }
pub record Or { TestOr }
pub record Orelse { TestOrElse }
pub record Query { TestQuery }
pub record Receive { TestReceive }
pub record Rem { TestRem }
pub record Try { TestTry }
pub record When { TestWhen }
pub record Xor { TestXor }

----- COMPILED ERLANG
-module(my@mod).
-compile([no_auto_import, nowarn_unused_vars, nowarn_unused_function, nowarn_nomatch]).

-export_type(['after'/0, 'and'/0, 'andalso'/0, 'band'/0, 'begin'/0, 'bnot'/0, 'bor'/0, 'bsl'/0, 'bsr'/0, 'bxor'/0, 'case'/0, 'catch'/0, 'cond'/0, 'div'/0, 'end'/0, 'fun'/0, 'if'/0, 'let'/0, 'maybe'/0, 'not'/0, 'of'/0, 'or'/0, 'orelse'/0, 'query'/0, 'receive'/0, 'rem'/0, 'try'/0, 'when'/0, 'xor'/0]).

-type 'after'() :: test_after.

-type 'and'() :: test_and.

-type 'andalso'() :: test_and_also.

-type 'band'() :: test_b_and.

-type 'begin'() :: test_begin.

-type 'bnot'() :: test_b_not.

-type 'bor'() :: test_b_or.

-type 'bsl'() :: test_bsl.

-type 'bsr'() :: test_bsr.

-type 'bxor'() :: test_b_xor.

-type 'case'() :: test_case.

-type 'catch'() :: test_catch.

-type 'cond'() :: test_cond.

-type 'div'() :: test_div.

-type 'end'() :: test_end.

-type 'fun'() :: test_fun.

-type 'if'() :: test_if.

-type 'let'() :: test_let.

-type 'maybe'() :: test_maybe.

-type 'not'() :: test_not.

-type 'of'() :: test_of.

-type 'or'() :: test_or.

-type 'orelse'() :: test_or_else.

-type 'query'() :: test_query.

-type 'receive'() :: test_receive.

-type 'rem'() :: test_rem.

-type 'try'() :: test_try.

-type 'when'() :: test_when.

-type 'xor'() :: test_xor.
